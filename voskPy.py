from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import vosk
import wave
import json
import tempfile
import os
import logging
from pydub import AudioSegment  # ‚úÖ AJOUTER CETTE LIGNE
import urllib3
import requests


APP_CONTEXT = """
Mon application s'appelle Tranon'AI c'est une application mobile multi-platform.

Fonctionnalit√©s principales :
- Fonction 1 : allumer ou eteindre un appareille
- Fonction 2 : utilisation de camera pour voir une intrusion qui enregistre la photo des inconnus du foyer
- Fonction 3 : detection de gaz, fumee et temperature a laquelle vous etes notifie par sms
- Fonction 4 : voir la consommation en temps reel et payer la facture du JIRAMA

Comment utiliser :
- Pour allumer une appareil, il faut aller dans la page energie puis clique sur l'onglet Appareils et choisir l'appareil disponible qui a deux status allumer ou eteindre
- Pour voir l'etat du capteurs, il faut aller dans la page s√©curit√© puis aller dans l'onglet capteurs pour voir l'etat
- Pour payer un facture il faut cliquer le card statistique dans la page Energie sur l'onglet aper√ßu


Commandes vocales support√©es :
- "allumer lampe 1" : ouvre allumer la lampe 1
- "aide" : affiche l'aide
- etc.
"""

conversation_history = [
    {
        "role": "system",
        "content": f"""Tu es l'assistant vocal de l'application mobile suivante.
üö´ INTERDICTIONS TOTALES :
- JAMAIS d'ast√©risques *, de tirets -, de puces ‚Ä¢, de hashtags #
R√àGLES ABSOLUES :
1. JAMAIS de markdown, formatage, puces, ast√©risques, hashtags
2. Si la question ne concerne pas l'application, dis poliment que tu ne peux r√©pondre qu'aux questions sur l'app
3. R√©ponds UNIQUEMENT aux questions concernant l'application Tranon'AI
4. Parle comme si tu parlais √† l'oral, naturellement
5. √âvite les listes √† puces, donne des phrases fluides



Informations sur l'application :
{APP_CONTEXT}

R√©ponds de mani√®re concise et claire."""
    }
]

def call_ollama_chat_mistral(prompt):
    url = "http://localhost:11434/api/chat"
    headers = {"Content-Type": "application/json"}
    
    # Ajouter la question de l'utilisateur √† l'historique
    conversation_history.append({"role": "user", "content": prompt})
#    phi3:mini 
# gemma2:2b
    payload = {
        "model": "gemma2:2b",
        "messages": conversation_history,
        "stream": False,
        "options": {
            "temperature": 0.3,
            "top_p": 0.9
        }
    }

    try:
        response = requests.post(url, json=payload, headers=headers, verify=False)
        response.raise_for_status()
        data = response.json()

        if "message" in data and "content" in data["message"]:
            content = data["message"]["content"]
            conversation_history.append({"role": "assistant", "content": content})
            
            # ‚úÖ AJOUT IMPORTANT : Ajo
            print("Ollama response:", content)
            return content
        else:
            print("Unexpected response format:", data)
            return None
    except requests.RequestException as e:
        print("Error communicating with endpoint:", e)
        return None
    except json.JSONDecodeError as e:
        print("Error parsing JSON response:", e)
        return None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Charger le mod√®le Vosk
model_path = "vosk-model-fr-0.22"
try:
    model = vosk.Model(model_path)
    logger.info(f"Mod√®le Vosk charg√© depuis {model_path}")
except Exception as e:
    logger.error(f"Erreur lors du chargement du mod√®le: {e}")
    model = None

@app.post("/transcribe")
async def transcribe(file: UploadFile = File(...)):
    if model is None:
        raise HTTPException(status_code=500, detail="Mod√®le Vosk non charg√©")
    
    logger.info(f"üì• Fichier re√ßu: {file.filename}, type: {file.content_type}")
    
    # Sauvegarder le fichier upload√©
    with tempfile.NamedTemporaryFile(delete=False, suffix=".tmp") as temp_input:
        content = await file.read()
        temp_input.write(content)
        temp_input.flush()
        temp_input_path = temp_input.name
    
    logger.info(f"üìÅ Fichier temporaire cr√©√©: {temp_input_path}, taille: {len(content)} bytes")
    
    # V√©rifier les premiers octets
    with open(temp_input_path, 'rb') as f:
        header = f.read(12)
        logger.info(f"üîç En-t√™te fichier: {header[:4]}")
    
    temp_audio_path = None
    try:
        # Convertir en WAV valide avec pydub
        logger.info("üîÑ Conversion en WAV...")
        audio = AudioSegment.from_file(temp_input_path)
        
        # Convertir en mono, 16000 Hz, 16-bit
        audio = audio.set_channels(1)
        audio = audio.set_frame_rate(16000)
        audio = audio.set_sample_width(2)  # 16-bit = 2 bytes
        
        # Sauvegarder en WAV
        temp_audio_path = temp_input_path.replace(".tmp", ".wav")
        audio.export(temp_audio_path, format="wav")
        logger.info(f"‚úÖ Fichier WAV cr√©√©: {temp_audio_path}")
        
        # Transcription avec Vosk
        with wave.open(temp_audio_path, "rb") as wav_file:
            logger.info(f"üéµ Audio: {wav_file.getnchannels()} canaux, {wav_file.getframerate()} Hz, {wav_file.getsampwidth()*8} bit")
            
            if wav_file.getnchannels() != 1:
                raise HTTPException(status_code=400, detail="Le fichier audio doit √™tre mono")
            if wav_file.getsampwidth() != 2:
                raise HTTPException(status_code=400, detail="Le fichier audio doit √™tre 16-bit PCM")

            rec = vosk.KaldiRecognizer(model, wav_file.getframerate())
            rec.SetWords(True)
            results = []

            while True:
                data = wav_file.readframes(4000)
                if len(data) == 0:
                    break
                if rec.AcceptWaveform(data):
                    res = json.loads(rec.Result())
                    if res.get("text"):
                        results.append(res)

            final_res = json.loads(rec.FinalResult())
            if final_res.get("text"):
                results.append(final_res)

            text = " ".join([r.get("text", "") for r in results if r.get("text")])
            response=call_ollama_chat_mistral(text)
            logger.info(f"üìù Transcription: {response}")
            return {"text": response, "confidence": 1.0} # type: ignore

    except Exception as e:
        logger.error(f"‚ùå Erreur: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur de traitement: {str(e)}")
    
    finally:
        # Nettoyer les fichiers temporaires
        if os.path.exists(temp_input_path):
            os.unlink(temp_input_path)
        if temp_audio_path and os.path.exists(temp_audio_path):
            os.unlink(temp_audio_path)

@app.get("/health")
async def health_check():
    return {"status": "healthy", "model_loaded": model is not None, "model_path": model_path}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")